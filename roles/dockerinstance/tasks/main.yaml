- include: firewall.yaml

- name: add the docker.io repository
  copy: dest=/etc/apt/sources.list.d/docker.list content='deb https://get.docker.com/ubuntu docker main'
 
- name: add the docker.io repository key
  apt_key: keyserver=keyserver.ubuntu.com id=36A1D7869245C8950F966E92D8576A8BA88D21E9
 
- name: update apt
  apt: update_cache=yes upgrade=dist

- name: install kernel extras for AUFS
  apt: pkg=linux-image-extra-virtual state=present
  register: needsreboot

- name: reboot machine if needed
  command: /sbin/reboot now 
  when: needsreboot.changed 
 
- name: wait until rebooted... 
  local_action: wait_for host={{ ansible_ssh_host }} port={{ ansible_ssh_port }} state=started search_regex=OpenSSH timeout=300 delay=20 
  sudo: no
  when: needsreboot.changed 
 
- name: is it running?
  command: uptime  
  when: needsreboot.changed 
  changed_when: false

- name: install packages
  apt: "pkg={{ item }} state=present"
  with_items:
    - lxc-docker
    - supervisor

- name: copy docker start script
  copy: src=dockerrun.sh dest=/usr/local/bin/dockerrun.sh mode=0755

- name: "make sure datadir /usr/src/{{ item.name }} exists"
  file: "path=/usr/src/{{ item.name }}/data state=directory"
  with_items: instances

- name: "fetch Dockerfile for {{ item.name }} from {{ item.dockerfile }}"
  get_url: "url={{ item.dockerfile }} dest=/usr/src/{{ item.name }}/Dockerfile mode=0440"
  with_items: instances

- name: "check if docker image for {{ item.name }} already exists"
  command: "docker history {{item.name}}"
  register: imagetest
  changed_when: imagetest.rc != 0
  failed_when: false
  with_items: instances

- name: "build Dockerfile for {{item.item.name}}"
  shell: "cd /usr/src/{{ item.item.name }} && docker build -t {{ item.item.name }} ."
  when: item.changed
  with_items: imagetest.results

- name: "create datadirectory for {{ item.name }}"
  file: "path=/usr/src/{{ item.name }}/data owner=vagrant group=vagrant state=directory"
  with_items: instances

- name: "set supervisor config for {{ item.name }}"
  template: "src=supervisor.conf.j2 dest=/etc/supervisor/conf.d/{{item.name}}.conf"
  with_items: instances

- name: "reread and update supervisor configs"
  shell: "supervisorctl reread && supervisorctl update"
  changed_when: false

- name: "make sure {{item.name}} is started"
  supervisorctl: "name={{item.name}} state=started"
  failed_when: false
  with_items: instances

